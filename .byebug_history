exit
githubdata.commit_info
githubdata.commit_info.count
c
githubdata.commit_info[2].first["repo"]
githubdata.commit_info[2].first[:repo]
githubdata.commit_info[2].first
githubdata.commit_info[2]
githubdata.commit_info[2]["repo"]
githubdata.commit_info[2][:repo]
githubdata.commit_info[2].count
githubdata.commit_info[2]
githubdata.commit_info[1]
githubdata.commit_info.first
githubdata.commit_info
githubdata.recent_commits
githubdata
c
exit
current_user
c
attrs['followers']
attrs[:followers]
attrs
c
attrs
c
attrs
c
current_user.save
current_user.githubdata = githubdata
current_user.githubdata
current_user
c
githubdata.followers
githubdata
current_user.update_attribute("githubdata", githubdata)
current_user
c
current_user
c
githubdata
current_user
c
user
c
user.githubdata
exit
user.githubdata
user
exit
user
user.githubdata ||= "frank"
user.githubdata
user = User.new
User.new
user.githubdata
user
c
current_user.githubdata = attributes
current_user.githubdata
c
GithubData.new(attributes)
attributes.class
c
GithubService.new(current_user).attributes
c
page = Nokogiri::HTML(open("https://github.com/#{user.nickname}"))
c
following
c
followers
commit_info
c
whereami
event
commit_info
c
commit_info
c
commit_info
c
commit_info
c
commit_info
c
commit_info
c
commit_info
c
exit
commit_info.map {|event| event[:type] == "PushEvent" && event.dig(:payload, :commits).any? {|com| com.dig(:author, :name) == user.name}}
commit_info.map {|event| event[:type] == "PushEvent"}
commit_info
c
event.dig(:payload, :commits).any? {|com| com.dig(:author, :name) == user.name}
event.dig(:payload, :commits).include?(:author)
event.dig(:payload, :commits)
user
event[:payload][:commits].first[:author]
event[:payload][:commits].first
event[:payload][:commits][:author]
event[:payload][:commits]
event[:payload]
event = parse(connection.get("users/#{user.nickname}/events")).select {|event| event[:type] == "PushEvent"}.first
parse(connection.get("users/#{user.nickname}/events")).select {|event| event[:type] == "PushEvent"}
    end
      event[:type] == "PushEvent"
parse(connection.get("users/#{user.nickname}/events")).select do |event|
parse(connection.get("users/#{user.nickname}/events"))
c
auth_hash
c
GithubService.new(current_user).number_starred_repos.count
GithubService.new(current_user).number_starred_repos
c
GithubService.new(current_user).number_starred_repos
c
auth_hash
c
connection.get("users/#{user.nickname}/following").body
c
res.last[:login]
res.last
res.class.last
res.class
res = JSON.parse(connection.get("users/#{user.nickname}/following").body, symbolize_names: true)
JSON.parse(connection.get("users/#{user.nickname}/following").body, symbolize_names: true)
connection.get("users/#{user.nickname}/following").body
Net::HTTP.get("https://api.github.com", "/users/#{user.nickname}/following")
Net::HTTP.get("https://api.github.com/users/#{user.nickname}/following")
Net::HTTP.get("users/#{user.nickname}/following")
Net::HTTP
connection.get("users/#{user.nickname}/following").body
connection.get("users/#{user.nickname}/following").body.class
connection.get("users/#{user.nickname}/following").body
connection.get("users/#{user.nickname}/following")
c
connection.get("users/#{user.nickname}/following")
JSON.parse(connection.get("users/#{user.nickname}/following").body)
connection.get("users/#{user.nickname}/following").body
connection.get("users/#{user.nickname}/following")
c
l=
GithubService.new(current_user).following.first
GithubService.new(current_user).following
GithubService.new(current_user).following.first[:login]
GithubService.new(current_user).following.first
GithubService.new(current_user).following
GithubService.new(current_user).following.first[:login]
GithubService.new(current_user).following.first
GithubService.new(current_user).following
GithubService.new(current_user).following.body
GithubService.new(current_user).following
GithubService.new(current_user)
c
current_user
GithubService.new(current_user)
c
x
GithubService.new
current_user
c
current_user
auth_hash.extra.raw_info.login
auth_hash.extra.raw_info.followers.login
auth_hash.info
auth_hash.extra.raw_info.followers
auth_hash.extra.raw_info
auth_hash.extra.avatar_url
auth_hash.extra.public_repos
auth_hash.extra.name
auth_hash.extra
auth_hash.name
auth_hash
c
current_user
GithubService.new
current_user
exit
step
next
step
GithubService.new
user
